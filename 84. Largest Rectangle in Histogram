class Solution {
    public int largestRectangleArea(int[] heights) {
        // phla kam h pse nikalna aur nse nikalna
        // fir nse-pse+1*heights[i]
        Stack<Integer> st = new Stack<>();
        int n = heights.length;
        int[] nse = new int[n];
        int[] pse = new int[n];
        st.push(n - 1);
        nse[n - 1] = n;
        for (int i = n - 2; i >= 0; i--) {
            while (!st.isEmpty() && heights[st.peek()] >= heights[i]) {
                st.pop();
            }
            if (st.isEmpty()) {
                nse[i] = n;
            } else {
                nse[i] = st.peek();

            }
            st.push(i);
        }
        st.clear();
        pse[0] = -1;
        st.push(0);
        for (int i = 1; i < n; i++) {
            while (!st.isEmpty() && heights[st.peek()] >= heights[i]) {
                st.pop();
            }
            if (st.isEmpty()) {
                pse[i] = -1;
            } else {
                pse[i] = st.peek();

            }
            st.push(i);
        }
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            int ans = (nse[i] - pse[i] - 1) * heights[i];
            if (ans > max) {
                max = ans;
            }
        }
        return max;

    }
}
